https://github.com/qstumn/BadgeView

https://github.com/matrixxun/MaterialBadgeTextView

https://github.com/czy1121/badgebutton

https://github.com/bingoogolapple/BGABadgeView-Android

https://github.com/AlexLiuSheng/BadgeView


public class BadgeView extends TextView {

    private String TAG = "BadgeView";

    public static final int SHAPE_POINT = 0;
    public static final int SHAPE_CIRCLE = 1;
    public static final int SHAPE_RECTANGLE = 2;
    public static final int SHAPE_OVAL = 3;
    public static final int SHAPTE_ROUND_RECTANGLE = 4;
    public static final int SHAPE_SQUARE = 5;
    private int shape;


    private int height;
    private int width;
    private GradientDrawable mGradientDrawable;

    private int txtColor;
    private int backgroundColor;

    private float[] radius;

    private float topLeftRadius;
    private float topRightRadius;
    private float bottomLeftRadius;
    private float bottomRightRadius;


    public BadgeView(Context context) {
        this(context, null);
    }

    public BadgeView(Context context, @Nullable AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public BadgeView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);

        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.BadgeView);

        txtColor = typedArray.getColor(R.styleable.BadgeView_txtColor, Color.WHITE);
        shape = typedArray.getInt(R.styleable.BadgeView_shape, SHAPE_CIRCLE);
        backgroundColor = typedArray.getColor(R.styleable.BadgeView_backgroundColor, Color.RED);

        topLeftRadius = (int) typedArray.getDimension(R.styleable.BadgeView_topLeftRadius, 1);
        topRightRadius = (int) typedArray.getDimension(R.styleable.BadgeView_topRightRadius, 1);
        bottomLeftRadius = (int) typedArray.getDimension(R.styleable.BadgeView_bottomLeftRadius, 1);
        bottomRightRadius = (int) typedArray.getDimension(R.styleable.BadgeView_bottomRightRadius, 1);
        radius = new float[]{topLeftRadius, topLeftRadius, topRightRadius, topRightRadius, bottomRightRadius, bottomRightRadius, bottomLeftRadius, bottomLeftRadius};

        typedArray.recycle();

        init();
    }

    private void init() {
        //创建drawable
        mGradientDrawable = new GradientDrawable();

        setGravity(Gravity.CENTER);
        setTextColor(txtColor);
    }

    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();

        //增加整体布局监听
        ViewTreeObserver vto = getViewTreeObserver();
        vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
                    getViewTreeObserver().removeOnGlobalLayoutListener(null);
                }
                height = getMeasuredHeight();
                width = getMeasuredWidth();
                Log.d(TAG, width + "=====" + height);

                setDrawable();
            }
        });
    }


    private void setDrawable() {
        switch (shape) {
            case SHAPE_POINT:
                mGradientDrawable.setShape(GradientDrawable.OVAL);
                break;
            case SHAPE_CIRCLE:
                mGradientDrawable.setShape(GradientDrawable.OVAL);
                break;
            case SHAPE_RECTANGLE:
                mGradientDrawable.setShape(GradientDrawable.RECTANGLE);
                break;
            case SHAPE_OVAL:
                mGradientDrawable.setShape(GradientDrawable.RECTANGLE);
                Log.d(TAG, "setDrawable: ---------" + height / 2);
                mGradientDrawable.setCornerRadius(height / 2);
                break;
            case SHAPTE_ROUND_RECTANGLE:
                mGradientDrawable.setShape(GradientDrawable.RECTANGLE);
                mGradientDrawable.setCornerRadii(radius);
                break;
            case SHAPE_SQUARE:
                mGradientDrawable.setShape(GradientDrawable.RECTANGLE);
                break;
            default:
                break;
        }
        mGradientDrawable.setColor(backgroundColor);
        setBackground(mGradientDrawable);
    }
}
